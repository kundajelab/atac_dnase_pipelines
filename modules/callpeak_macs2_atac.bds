#!/usr/bin/env bds
#vim: syntax=java

include "species.bds"
include "module_template.bds"


help == callpeak macs2 settings (requirements: -chrsz -gensz)
gensz 		:= ""		help Genome size; hs for human, mm for mouse.
wt_macs2	:= "23h"	help Walltime for MACS2 (default: 23h, 23:00:00).
mem_macs2	:= "15G" 	help Max. memory for MACS2 (default: 15G).
extra_param_macs2 := ""		help Extra parameters for macs2 callpeak.


grp_color_macs2	:= "lightgreen"


init_callpeak_macs2()


void init_callpeak_macs2() {

	gensz		= get_conf_val( gensz, 		["gensz"])
	wt_macs2 	= get_conf_val( wt_macs2, 	["wt_macs2"] )
	mem_macs2	= get_conf_val( mem_macs2, 	["mem_macs2"] )
	extra_param_macs2	= get_conf_val( extra_param_macs2, 	["extra_param_macs2"] )

	print("\n\n== callpeak macs2 settings\n")
	print( "Genome size (hs,mm)\t\t: $gensz\n" )
	print( "Walltime (macs2)\t\t: $wt_macs2\n")
	print( "Max. memory (macs2)\t\t: $mem_macs2\n")
	print( "Extra parameters for macs2 callpeak\t\t: $extra_param_macs2\n")
}

void chk_callpeak_macs2() {

	if ( gensz == "" ) error("Genome size (-gensz) must be defined! (mm for mouse, hs for human)")
	if ( !path_exists( chrsz ) ) error("Chromosome size file (-chrsz) is missing! (file: $chrsz)")
}

string[] macs2_atac( string tag, string smooth_window, string pval_thresh, bool make_sig, \
			string peak_o_dir, string sig_o_dir, string group ) {

	pval_str 	:= (pval_thresh=="0.01") ? "" : ".pval$pval_thresh"	
	prefix 		:= replace_dir( rm_ext( tag, ["bed","tagAlign"] ), peak_o_dir ) + ".pf$pval_str"
	prefix_sig 	:= replace_dir( prefix, sig_o_dir )
	
	// peaks

	peakfile 	:= "$prefix.narrowPeak.gz"
	bpeakfile	:= "$prefix.broadPeak.gz"
	gpeakfile	:= "$prefix.gappedPeak.gz"

	fc_bedgraph 	:= "$prefix.fc.signal.bedgraph"
	fc_bedgraph_srt	:= "$prefix.fc.signal.srt.bedgraph"	
	fc_bigwig 	:= "$prefix_sig.fc.signal.bigwig"

	pval_bedgraph 	:= "$prefix.pval.signal.bedgraph"
	pval_bedgraph_srt 	:= "$prefix.pval.signal.srt.bedgraph"	
	pval_bigwig 	:= "$prefix_sig.pval.signal.bigwig"
 
	shiftsize := round( smooth_window.parseReal()/2.0 )

	blacklist_exists := path_exists(blacklist)

	in 	:= [ tag ]
	out 	:= make_sig ? [ peakfile, gpeakfile, fc_bigwig, pval_bigwig ] : [ peakfile, gpeakfile ]

	taskName:= "macs2_atac " + group + pval_str
	mem := get_res_mem(mem_macs2,1);	timeout := get_res_wt(wt_macs2)

	wait_par( cpus )

	tid := task( out<-in ) {
	
		sys $shcmd_init
		sys export LC_COLLATE=C

		sys macs2 callpeak \
			-t $tag -f BED -n "$prefix" -g "$gensz" -p $pval_thresh \
			--nomodel --shift -$shiftsize --extsize $smooth_window --broad --keep-dup all $extra_param_macs2

		//# Sort by Col8 in descending order and replace long peak names in Column 4 with Peak_<peakRank>
		sys slopBed -i "$prefix"_peaks.broadPeak -g "$chrsz" -b 0 | sort -k 8gr,8gr | awk 'BEGIN{OFS="\t"}{$4="Peak_"NR ; print $0}' | gzip -nc > $bpeakfile
		sys slopBed -i "$prefix"_peaks.gappedPeak -g "$chrsz" -b 0 | sort -k 14gr,14gr | awk 'BEGIN{OFS="\t"}{$4="Peak_"NR ; print $0}' | gzip -nc > $gpeakfile
		sys rm -f "$prefix"_peaks.broadPeak
		sys rm -f "$prefix"_peaks.gappedPeak

		sys macs2 callpeak \
			-t $tag -f BED -n "$prefix" -g "$gensz" -p $pval_thresh \
			--nomodel --shift -$shiftsize --extsize $smooth_window -B --SPMR --keep-dup all --call-summits $extra_param_macs2

		//# Sort by Col8 in descending order and replace long peak names in Column 4 with Peak_<peakRank>
		sys slopBed -i "$prefix"_peaks.narrowPeak -g "$chrsz" -b 0 | sort -k 8gr,8gr | awk 'BEGIN{OFS="\t"}{$4="Peak_"NR ; print $0}' | gzip -nc > $peakfile
		sys rm -f "$prefix"_peaks.narrowPeak
		sys rm -f "$prefix"_peaks.xls
		sys rm -f "$prefix"_summits.bed

		// sys if [[ $blacklist_exists == "true" ]]; then \
		// 	bedtools intersect -v -a $peakfile -b $blacklist | gzip -nc > $filt_peakfile; \
		// 	bedtools intersect -v -a $gpeakfile -b $blacklist | gzip -nc > $filt_gpeakfile; \
		// 	bedtools intersect -v -a $bpeakfile -b $blacklist | gzip -nc > $filt_bpeakfile; \
		// fi

		sys if [[ $make_sig == "false" ]]; then \
			rm -f "$prefix"_treat_pileup.bdg "$prefix"_control_lambda.bdg; \
			$shcmd_finalize; \
			exit; \
		fi

		sys macs2 bdgcmp -t "$prefix"_treat_pileup.bdg -c "$prefix"_control_lambda.bdg \
			--o-prefix "$prefix" -m FE
		sys slopBed -i "$prefix"_FE.bdg -g "$chrsz" -b 0 | bedClip stdin "$chrsz" $fc_bedgraph
		sys rm -f "$prefix"_FE.bdg
		
		sys sort -k1,1 -k2,2n $fc_bedgraph > $fc_bedgraph_srt
		sys bedGraphToBigWig $fc_bedgraph_srt "$chrsz" "$fc_bigwig"
		sys rm -f $fc_bedgraph $fc_bedgraph_srt
		
		//# sval counts the number of tags per million in the (compressed) BED file
		sys sval=$(wc -l <(zcat -f "$tag") | awk '{printf "%f", $1/1000000}')
		
		sys macs2 bdgcmp \
			-t "$prefix"_treat_pileup.bdg -c "$prefix"_control_lambda.bdg \
			--o-prefix "$prefix" -m ppois -S "${sval}"
		sys slopBed -i "$prefix"_ppois.bdg -g "$chrsz" -b 0 | bedClip stdin "$chrsz" $pval_bedgraph
		sys rm -f "$prefix"_ppois.bdg
		
		sys sort -k1,1 -k2,2n $pval_bedgraph > $pval_bedgraph_srt
		sys bedGraphToBigWig $pval_bedgraph_srt "$chrsz" "$pval_bigwig"
		sys rm -f $pval_bedgraph $pval_bedgraph_srt

		sys rm -f "$prefix"_treat_pileup.bdg "$prefix"_control_lambda.bdg

		sys $shcmd_finalize
	}

	register_par( tid, cpus )

	add_task_to_graph( in, out, group, "MACS2\\np-val<$pval_thresh", grp_color_macs2 )

	return out
}
